///////////////////////////////////////////////////////////
//  SynchronousMachine.cs
//  Implementation of the Class SynchronousMachine
//  Generated by Enterprise Architect
//  Created on:      09-Jul-2016 12:00:50 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using CIM.IEC61970.Base.Wires;
using Projekat;
using CIM.IEC61970.Base.Core;

namespace CIM.IEC61970.Base.Wires {
	/// <summary>
	/// An electromechanical device that operates with shaft rotating synchronously
	/// with the network. It is a single machine operating either as a generator or
	/// synchronous condenser or pump.
	/// </summary>
	public class SynchronousMachine : RotatingMachine, IPrototype {
        public string substationID
        {
            get; set;
        }
		/// <summary>
		/// Default base reactive power value. This value represents the initial reactive
		/// power that can be used by any application function.
		/// </summary>
		public float baseQ
        {
            get; set;
        }
		/// <summary>
		/// Maximum reactive power limit. This is the maximum (nameplate) limit for the
		/// unit.
		/// </summary>
		public float maxQ
        {
            get; set;
        }
        /// <summary>
        /// Maximum voltage limit for the unit.
        /// </summary>
        public float maxU
        {
            get; set;
        }
        /// <summary>
        /// Minimum reactive power limit for the unit.
        /// </summary>
        public float minQ
        {
            get; set;
        }
        /// <summary>
        /// Minimum voltage  limit for the unit.
        /// </summary>
        public float minU
        {
            get; set;
        }
        /// <summary>
        /// Current mode of operation.
        /// </summary>
        //public SynchronousMachineOperatingMode operatingMode;/////////////////////////////////////////
        /// <summary>
        /// Modes that this synchronous machine can operate in.
        /// </summary>
        public SynchronousMachineKind type
        {
            get; set;
        }
        /// <summary>
        /// Range of generator voltage regulation (PG in the IEC 60909-0) used for
        /// calculation of the impedance correction factor KG defined in IEC 60909-0
        /// This attribute is used to describe the operating voltage of the generating unit.
        /// 
        /// </summary>
        public float voltageRegulationRange
        {
            get; set;
        }

        public SynchronousMachine(){

		}

        public SynchronousMachine(string id)
        {
            this.mRID = id;
        }

		~SynchronousMachine(){

		}

        public object Clone()
        {
            SynchronousMachine sm = new SynchronousMachine();

            foreach (SynchronousMachine l in Singleton.Instance().SynMachines)
            {
                if (l.mRID.Equals(this.mRID))
                {
                    sm.aliasName = l.aliasName;
                    sm.description = "clone_" + l.mRID;
                    sm.name = l.name;
                    sm.baseQ = l.baseQ;
                    sm.maxQ = l.maxQ;
                    sm.maxU = l.maxU;
                    sm.minQ = l.minQ;
                    sm.minU = l.minU;
                    //sm.operatingMode = l.operatingMode;
                    sm.ratedPowerFactor = l.ratedPowerFactor;
                    sm.ratedS = l.ratedS;
                    sm.ratedU = l.ratedU;
                    sm.type = l.type;
                    sm.voltageRegulationRange = l.voltageRegulationRange;
                    sm.substationID = l.substationID;
                    
                    foreach (Substation s in Singleton.Instance().Substations)
                    {
                        if (s.mRID.Equals(sm.substationID))
                        {
                            if (s.VoltageLevels[0].BaseVoltage.nominalVoltage >= sm.minU)
                            {
                                s.VoltageLevels[0].Equipments.Add(sm);
                                break;
                            }
                        }
                    }

                    break;
                }
            }

            return sm;
        }
    }//end SynchronousMachine

}//end namespace Wires