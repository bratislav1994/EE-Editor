///////////////////////////////////////////////////////////
//  Breaker.cs
//  Implementation of the Class Breaker
//  Generated by Enterprise Architect
//  Created on:      09-Jul-2016 12:00:49 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using CIM.IEC61970.Base.Wires;
using Projekat;
using CIM.IEC61970.Base.Core;

namespace CIM.IEC61970.Base.Wires {
	/// <summary>
	/// A mechanical switching device capable of making, carrying, and breaking
	/// currents under normal circuit conditions and also making, carrying for a
	/// specified time, and breaking currents under specified abnormal circuit
	/// conditions e.g.  those of short circuit.
	/// </summary>
	public class Breaker : ProtectedSwitch, IPrototype {

        public string substationID
        {
            get; set;
        }
		/// <summary>
		/// The transition time from open to close.
		/// </summary>
		public float inTransitTime { get; set; }

		public Breaker(){

		}

        public Breaker(string id)
        {
            this.mRID = id;
        }

		~Breaker(){

		}

        public object Clone()
        {
            Breaker b = new Breaker();

            foreach (Breaker l in Singleton.Instance().Breakers)
            {
                if (l.mRID.Equals(this.mRID))
                {
                    b.aliasName = l.aliasName;
                    b.description = "clone_" + l.mRID; ;
                    b.name = l.name;
                    b.inTransitTime = l.inTransitTime;
                    b.normalOpen = l.normalOpen;
                    b.open = l.open;
                    b.ratedCurrent = l.ratedCurrent;
                    b.retained = l.retained;
                    b.substationID = l.substationID;
                    

                    foreach (Substation s in Singleton.Instance().Substations)
                    {
                        if (s.mRID.Equals(b.substationID))
                        {
                            s.VoltageLevels[0].Equipments.Add(b);
                        }
                    }

                    break;
                }
            }

            return b;
        }
    }//end Breaker

}//end namespace Wires