///////////////////////////////////////////////////////////
//  PowerTransformer.cs
//  Implementation of the Class PowerTransformer
//  Generated by Enterprise Architect
//  Created on:      09-Jul-2016 12:00:50 AM
//  Original author: Tom
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using CIM.IEC61970.Base.Wires;
using CIM.IEC61970.Base.Core;
using Projekat;

namespace CIM.IEC61970.Base.Wires {
	/// <summary>
	/// An electrical device consisting of  two or more coupled windings, with or
	/// without a magnetic core, for introducing mutual coupling between electric
	/// circuits. Transformers can be used to control voltage and phase shift (active
	/// power flow).
	/// A power transformer may be composed of separate transformer tanks that need not
	/// be identical.
	/// A power transformer can be modeled with or without tanks and is intended for
	/// use in both balanced and unbalanced representations.   A power transformer
	/// typically has two terminals, but may have one (grounding), three or more
	/// terminals.
	/// The inherited association ConductingEquipment.BaseVoltage should not be used.
	/// The association from TransformerEnd to BaseVoltage should be used instead.
	/// </summary>
	public class PowerTransformer : ConductingEquipment, IPrototype {
        public string substationID
        {
            get; set;
        }
		/// <summary>
		/// The minimum operating voltage (uQmin in the IEC 60909-0) at the high voltage
		/// side (Q side) of the unit transformer of the power station unit. A value well
		/// established from long-term operating experience of the system. It is used for
		/// calculation of the impedance correction factor KG defined in IEC 60909-0
		/// </summary>
		public float highSideMinOperatingU
        {
            get; set;
        }
		/// <summary>
		/// The ends of this power transformer.
		/// </summary>
		public List<PowerTransformerEnd> PowerTransformerEnd = new List<Wires.PowerTransformerEnd>();

        public PowerTransformer(){
            

        }

        public PowerTransformer(string id)
        {
            this.mRID = id;
        }

        ~PowerTransformer(){

		}

        public object Clone()
        {
            PowerTransformer pt = new PowerTransformer();

            foreach (PowerTransformer powTr in Singleton.Instance().PowerTransformers)
            {
                if (powTr.mRID.Equals(this.mRID))
                {
                    pt.aliasName = powTr.aliasName;
                    pt.description = "clone_" + powTr.mRID;
                    pt.mRID = Guid.NewGuid().ToString().Substring(0, 8);
                    pt.name = powTr.name;
                    pt.highSideMinOperatingU = powTr.highSideMinOperatingU;
                    pt.PowerTransformerEnd = new List<PowerTransformerEnd>(powTr.PowerTransformerEnd);
                    pt.substationID = powTr.substationID;

                    foreach (Substation s in Singleton.Instance().Substations)
                    {
                        if (s.mRID.Equals(pt.substationID))
                        {
                            s.Equipments.Add(pt);
                            break;
                        }
                    }

                    break;
                }
            }

            return pt;
        }
    }//end PowerTransformer

}//end namespace Wires