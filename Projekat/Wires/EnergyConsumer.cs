///////////////////////////////////////////////////////////
//  EnergyConsumer.cs
//  Implementation of the Class EnergyConsumer
//  Generated by Enterprise Architect
//  Created on:      09-Jul-2016 12:00:50 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using CIM.IEC61970.Base.Core;
using Projekat;

namespace CIM.IEC61970.Base.Wires {
	/// <summary>
	/// Generic user of energy - a  point of consumption on the power system model.
	/// </summary>
	public class EnergyConsumer : ConductingEquipment, IPrototype {


        public string substationID
        {
            get; set;
        }
		/// <summary>
		/// Number of individual customers represented by this demand.
		/// </summary>
		public int customerCount
        { get; set; }
		/// <summary>
		/// Used for Yn and Zn connections. True if the neutral is solidly grounded.
		/// </summary>
		public bool grounded { get; set; }
        /// <summary>
        /// Active power of the load. Load sign convention is used, i.e. positive sign
        /// means flow out from a node.
        /// For voltage dependent loads the value is at rated voltage.
        /// Starting value for a steady state solution.
        /// </summary>
        public float p { get; set; }
        /// <summary>
        /// Active power of the load that is a fixed quantity. Load sign convention is used,
        /// i.e. positive sign means flow out from a node.
        /// </summary>
        public float pfixed { get; set; }
        /// <summary>
        /// Fixed active power as per cent of load group fixed active power. Load sign
        /// convention is used, i.e. positive sign means flow out from a node.
        /// </summary>
        public float pfixedPct { get; set; }
        /// <summary>
        /// Reactive power of the load. Load sign convention is used, i.e. positive sign
        /// means flow out from a node.
        /// For voltage dependent loads the value is at rated voltage.
        /// Starting value for a steady state solution.
        /// </summary>
        public float q { get; set; }
        /// <summary>
        /// Reactive power of the load that is a fixed quantity. Load sign convention is
        /// used, i.e. positive sign means flow out from a node.
        /// </summary>
        public float qfixed { get; set; }
        /// <summary>
        /// Fixed reactive power as per cent of load group fixed reactive power. Load sign
        /// convention is used, i.e. positive sign means flow out from a node.
        /// </summary>
        public float qfixedPct { get; set; }

        public EnergyConsumer(){

		}

        public EnergyConsumer(string id)
        {
            this.mRID = id;
        }

		~EnergyConsumer(){

		}

        public object Clone()
        {
            EnergyConsumer ec = new EnergyConsumer();

            foreach (EnergyConsumer consumer in Singleton.Instance().Consumers)
            {
                if (consumer.mRID.Equals(this.mRID))
                {
                    ec.aliasName = consumer.aliasName;
                    ec.description = "clone_" + consumer.mRID;
                    ec.name = consumer.name;
                    ec.customerCount = consumer.customerCount;
                    ec.grounded = consumer.grounded;
                    ec.p = consumer.p;
                    ec.pfixed = consumer.pfixed;
                    ec.pfixedPct = consumer.pfixedPct;
                    ec.q = consumer.q;
                    ec.qfixed = consumer.qfixed;
                    ec.qfixedPct = consumer.qfixedPct;
                    ec.substationID = consumer.substationID;

                    foreach (Substation s in Singleton.Instance().Substations)
                    {
                        if (s.mRID.Equals(ec.substationID))
                        {
                            s.VoltageLevels[0].Equipments.Add(ec);
                            break;
                        }
                    }

                    break;
                }
            }

            return ec;
        }
    }//end EnergyConsumer

}//end namespace Wires